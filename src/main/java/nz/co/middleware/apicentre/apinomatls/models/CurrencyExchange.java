/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import nz.co.middleware.apicentre.apinomatls.DateTimeHelper;

/**
 * This is a model class for CurrencyExchange type.
 */
public class CurrencyExchange {
    private String sourceCurrency;
    private String targetCurrency;
    private String unitCurrency;
    private double exchangeRate;
    private String contractIdentification;
    private LocalDateTime quotationDate;
    private InstructedAmount instructedAmount;

    /**
     * Default constructor.
     */
    public CurrencyExchange() {
    }

    /**
     * Initialization constructor.
     * @param  sourceCurrency  String value for sourceCurrency.
     * @param  exchangeRate  double value for exchangeRate.
     * @param  targetCurrency  String value for targetCurrency.
     * @param  unitCurrency  String value for unitCurrency.
     * @param  contractIdentification  String value for contractIdentification.
     * @param  quotationDate  LocalDateTime value for quotationDate.
     * @param  instructedAmount  InstructedAmount value for instructedAmount.
     */
    public CurrencyExchange(
            String sourceCurrency,
            double exchangeRate,
            String targetCurrency,
            String unitCurrency,
            String contractIdentification,
            LocalDateTime quotationDate,
            InstructedAmount instructedAmount) {
        this.sourceCurrency = sourceCurrency;
        this.targetCurrency = targetCurrency;
        this.unitCurrency = unitCurrency;
        this.exchangeRate = exchangeRate;
        this.contractIdentification = contractIdentification;
        this.quotationDate = quotationDate;
        this.instructedAmount = instructedAmount;
    }

    /**
     * Getter for SourceCurrency.
     * Currency from which an amount is to be converted in a currency conversion.
     * @return Returns the String
     */
    @JsonGetter("SourceCurrency")
    public String getSourceCurrency() {
        return sourceCurrency;
    }

    /**
     * Setter for SourceCurrency.
     * Currency from which an amount is to be converted in a currency conversion.
     * @param sourceCurrency Value for String
     */
    @JsonSetter("SourceCurrency")
    public void setSourceCurrency(String sourceCurrency) {
        this.sourceCurrency = sourceCurrency;
    }

    /**
     * Getter for TargetCurrency.
     * Currency from which an amount is to be converted in a currency conversion.
     * @return Returns the String
     */
    @JsonGetter("TargetCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTargetCurrency() {
        return targetCurrency;
    }

    /**
     * Setter for TargetCurrency.
     * Currency from which an amount is to be converted in a currency conversion.
     * @param targetCurrency Value for String
     */
    @JsonSetter("TargetCurrency")
    public void setTargetCurrency(String targetCurrency) {
        this.targetCurrency = targetCurrency;
    }

    /**
     * Getter for UnitCurrency.
     * Currency from which an amount is to be converted in a currency conversion.
     * @return Returns the String
     */
    @JsonGetter("UnitCurrency")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUnitCurrency() {
        return unitCurrency;
    }

    /**
     * Setter for UnitCurrency.
     * Currency from which an amount is to be converted in a currency conversion.
     * @param unitCurrency Value for String
     */
    @JsonSetter("UnitCurrency")
    public void setUnitCurrency(String unitCurrency) {
        this.unitCurrency = unitCurrency;
    }

    /**
     * Getter for ExchangeRate.
     * Factor used to convert an amount from one currency into another. This reflects the price at
     * which one currency was bought with another currency. Usage: ExchangeRate expresses the ratio
     * between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).
     * @return Returns the double
     */
    @JsonGetter("ExchangeRate")
    public double getExchangeRate() {
        return exchangeRate;
    }

    /**
     * Setter for ExchangeRate.
     * Factor used to convert an amount from one currency into another. This reflects the price at
     * which one currency was bought with another currency. Usage: ExchangeRate expresses the ratio
     * between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).
     * @param exchangeRate Value for double
     */
    @JsonSetter("ExchangeRate")
    public void setExchangeRate(double exchangeRate) {
        this.exchangeRate = exchangeRate;
    }

    /**
     * Getter for ContractIdentification.
     * Unique identification to unambiguously identify the foreign exchange contract.
     * @return Returns the String
     */
    @JsonGetter("ContractIdentification")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getContractIdentification() {
        return contractIdentification;
    }

    /**
     * Setter for ContractIdentification.
     * Unique identification to unambiguously identify the foreign exchange contract.
     * @param contractIdentification Value for String
     */
    @JsonSetter("ContractIdentification")
    public void setContractIdentification(String contractIdentification) {
        this.contractIdentification = contractIdentification;
    }

    /**
     * Getter for QuotationDate.
     * Date and time at which an exchange rate is quoted. All dates in the JSON payloads are
     * represented in ISO 8601 date-time format. All date-time fields in responses must include the
     * timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @return Returns the LocalDateTime
     */
    @JsonGetter("QuotationDate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getQuotationDate() {
        return quotationDate;
    }

    /**
     * Setter for QuotationDate.
     * Date and time at which an exchange rate is quoted. All dates in the JSON payloads are
     * represented in ISO 8601 date-time format. All date-time fields in responses must include the
     * timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @param quotationDate Value for LocalDateTime
     */
    @JsonSetter("QuotationDate")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setQuotationDate(LocalDateTime quotationDate) {
        this.quotationDate = quotationDate;
    }

    /**
     * Getter for InstructedAmount.
     * Amount of money of the cash balance after a transaction entry is applied to the account..
     * @return Returns the InstructedAmount
     */
    @JsonGetter("InstructedAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public InstructedAmount getInstructedAmount() {
        return instructedAmount;
    }

    /**
     * Setter for InstructedAmount.
     * Amount of money of the cash balance after a transaction entry is applied to the account..
     * @param instructedAmount Value for InstructedAmount
     */
    @JsonSetter("InstructedAmount")
    public void setInstructedAmount(InstructedAmount instructedAmount) {
        this.instructedAmount = instructedAmount;
    }

    /**
     * Converts this CurrencyExchange into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CurrencyExchange [" + "sourceCurrency=" + sourceCurrency + ", exchangeRate="
                + exchangeRate + ", targetCurrency=" + targetCurrency + ", unitCurrency="
                + unitCurrency + ", contractIdentification=" + contractIdentification
                + ", quotationDate=" + quotationDate + ", instructedAmount=" + instructedAmount
                + "]";
    }

    /**
     * Builds a new {@link CurrencyExchange.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CurrencyExchange.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(sourceCurrency, exchangeRate)
                .targetCurrency(getTargetCurrency())
                .unitCurrency(getUnitCurrency())
                .contractIdentification(getContractIdentification())
                .quotationDate(getQuotationDate())
                .instructedAmount(getInstructedAmount());
        return builder;
    }

    /**
     * Class to build instances of {@link CurrencyExchange}.
     */
    public static class Builder {
        private String sourceCurrency;
        private double exchangeRate;
        private String targetCurrency;
        private String unitCurrency;
        private String contractIdentification;
        private LocalDateTime quotationDate;
        private InstructedAmount instructedAmount;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  sourceCurrency  String value for sourceCurrency.
         * @param  exchangeRate  double value for exchangeRate.
         */
        public Builder(String sourceCurrency, double exchangeRate) {
            this.sourceCurrency = sourceCurrency;
            this.exchangeRate = exchangeRate;
        }

        /**
         * Setter for sourceCurrency.
         * @param  sourceCurrency  String value for sourceCurrency.
         * @return Builder
         */
        public Builder sourceCurrency(String sourceCurrency) {
            this.sourceCurrency = sourceCurrency;
            return this;
        }

        /**
         * Setter for exchangeRate.
         * @param  exchangeRate  double value for exchangeRate.
         * @return Builder
         */
        public Builder exchangeRate(double exchangeRate) {
            this.exchangeRate = exchangeRate;
            return this;
        }

        /**
         * Setter for targetCurrency.
         * @param  targetCurrency  String value for targetCurrency.
         * @return Builder
         */
        public Builder targetCurrency(String targetCurrency) {
            this.targetCurrency = targetCurrency;
            return this;
        }

        /**
         * Setter for unitCurrency.
         * @param  unitCurrency  String value for unitCurrency.
         * @return Builder
         */
        public Builder unitCurrency(String unitCurrency) {
            this.unitCurrency = unitCurrency;
            return this;
        }

        /**
         * Setter for contractIdentification.
         * @param  contractIdentification  String value for contractIdentification.
         * @return Builder
         */
        public Builder contractIdentification(String contractIdentification) {
            this.contractIdentification = contractIdentification;
            return this;
        }

        /**
         * Setter for quotationDate.
         * @param  quotationDate  LocalDateTime value for quotationDate.
         * @return Builder
         */
        public Builder quotationDate(LocalDateTime quotationDate) {
            this.quotationDate = quotationDate;
            return this;
        }

        /**
         * Setter for instructedAmount.
         * @param  instructedAmount  InstructedAmount value for instructedAmount.
         * @return Builder
         */
        public Builder instructedAmount(InstructedAmount instructedAmount) {
            this.instructedAmount = instructedAmount;
            return this;
        }

        /**
         * Builds a new {@link CurrencyExchange} object using the set fields.
         * @return {@link CurrencyExchange}
         */
        public CurrencyExchange build() {
            return new CurrencyExchange(sourceCurrency, exchangeRate, targetCurrency, unitCurrency,
                    contractIdentification, quotationDate, instructedAmount);
        }
    }
}
