/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import java.util.List;
import nz.co.middleware.apicentre.apinomatls.DateTimeHelper;

/**
 * This is a model class for StatementModel type.
 */
public class StatementModel {
    private String accountId;
    private String statementId;
    private String statementReference;
    private StatementTypeEnum type;
    private LocalDateTime startDateTime;
    private LocalDateTime endDateTime;
    private LocalDateTime creationDateTime;
    private List<String> statementDescription;
    private List<StatementBenefit> statementBenefit;
    private List<StatementFee> statementFee;
    private List<StatementInterest> statementInterest;
    private List<StatementDateTime> statementDateTime;
    private List<StatementRate> statementRate;
    private List<StatementValue> statementValue;
    private List<StatementAmount> statementAmount;

    /**
     * Default constructor.
     */
    public StatementModel() {
    }

    /**
     * Initialization constructor.
     * @param  accountId  String value for accountId.
     * @param  type  StatementTypeEnum value for type.
     * @param  startDateTime  LocalDateTime value for startDateTime.
     * @param  endDateTime  LocalDateTime value for endDateTime.
     * @param  creationDateTime  LocalDateTime value for creationDateTime.
     * @param  statementId  String value for statementId.
     * @param  statementReference  String value for statementReference.
     * @param  statementDescription  List of String value for statementDescription.
     * @param  statementBenefit  List of StatementBenefit value for statementBenefit.
     * @param  statementFee  List of StatementFee value for statementFee.
     * @param  statementInterest  List of StatementInterest value for statementInterest.
     * @param  statementDateTime  List of StatementDateTime value for statementDateTime.
     * @param  statementRate  List of StatementRate value for statementRate.
     * @param  statementValue  List of StatementValue value for statementValue.
     * @param  statementAmount  List of StatementAmount value for statementAmount.
     */
    public StatementModel(
            String accountId,
            StatementTypeEnum type,
            LocalDateTime startDateTime,
            LocalDateTime endDateTime,
            LocalDateTime creationDateTime,
            String statementId,
            String statementReference,
            List<String> statementDescription,
            List<StatementBenefit> statementBenefit,
            List<StatementFee> statementFee,
            List<StatementInterest> statementInterest,
            List<StatementDateTime> statementDateTime,
            List<StatementRate> statementRate,
            List<StatementValue> statementValue,
            List<StatementAmount> statementAmount) {
        this.accountId = accountId;
        this.statementId = statementId;
        this.statementReference = statementReference;
        this.type = type;
        this.startDateTime = startDateTime;
        this.endDateTime = endDateTime;
        this.creationDateTime = creationDateTime;
        this.statementDescription = statementDescription;
        this.statementBenefit = statementBenefit;
        this.statementFee = statementFee;
        this.statementInterest = statementInterest;
        this.statementDateTime = statementDateTime;
        this.statementRate = statementRate;
        this.statementValue = statementValue;
        this.statementAmount = statementAmount;
    }

    /**
     * Getter for AccountId.
     * A unique and immutable identifier used to identify the account resource. This identifier has
     * no meaning to the account owner.
     * @return Returns the String
     */
    @JsonGetter("AccountId")
    public String getAccountId() {
        return accountId;
    }

    /**
     * Setter for AccountId.
     * A unique and immutable identifier used to identify the account resource. This identifier has
     * no meaning to the account owner.
     * @param accountId Value for String
     */
    @JsonSetter("AccountId")
    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    /**
     * Getter for StatementId.
     * Unique identifier for the statement resource within an servicing institution. This identifier
     * is both unique and immutable.
     * @return Returns the String
     */
    @JsonGetter("StatementId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStatementId() {
        return statementId;
    }

    /**
     * Setter for StatementId.
     * Unique identifier for the statement resource within an servicing institution. This identifier
     * is both unique and immutable.
     * @param statementId Value for String
     */
    @JsonSetter("StatementId")
    public void setStatementId(String statementId) {
        this.statementId = statementId;
    }

    /**
     * Getter for StatementReference.
     * Unique reference for the statement. This reference may be optionally populated if available.
     * @return Returns the String
     */
    @JsonGetter("StatementReference")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getStatementReference() {
        return statementReference;
    }

    /**
     * Setter for StatementReference.
     * Unique reference for the statement. This reference may be optionally populated if available.
     * @param statementReference Value for String
     */
    @JsonSetter("StatementReference")
    public void setStatementReference(String statementReference) {
        this.statementReference = statementReference;
    }

    /**
     * Getter for Type.
     * Statement type, in a coded form.
     * @return Returns the StatementTypeEnum
     */
    @JsonGetter("Type")
    public StatementTypeEnum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * Statement type, in a coded form.
     * @param type Value for StatementTypeEnum
     */
    @JsonSetter("Type")
    public void setType(StatementTypeEnum type) {
        this.type = type;
    }

    /**
     * Getter for StartDateTime.
     * Date and time at which the statement period starts. All dates in the JSON payloads are
     * represented in ISO 8601 date-time format. All date-time fields in responses must include the
     * timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @return Returns the LocalDateTime
     */
    @JsonGetter("StartDateTime")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getStartDateTime() {
        return startDateTime;
    }

    /**
     * Setter for StartDateTime.
     * Date and time at which the statement period starts. All dates in the JSON payloads are
     * represented in ISO 8601 date-time format. All date-time fields in responses must include the
     * timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @param startDateTime Value for LocalDateTime
     */
    @JsonSetter("StartDateTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setStartDateTime(LocalDateTime startDateTime) {
        this.startDateTime = startDateTime;
    }

    /**
     * Getter for EndDateTime.
     * Date and time at which the statement period ends. All dates in the JSON payloads are
     * represented in ISO 8601 date-time format. All date-time fields in responses must include the
     * timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @return Returns the LocalDateTime
     */
    @JsonGetter("EndDateTime")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getEndDateTime() {
        return endDateTime;
    }

    /**
     * Setter for EndDateTime.
     * Date and time at which the statement period ends. All dates in the JSON payloads are
     * represented in ISO 8601 date-time format. All date-time fields in responses must include the
     * timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @param endDateTime Value for LocalDateTime
     */
    @JsonSetter("EndDateTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setEndDateTime(LocalDateTime endDateTime) {
        this.endDateTime = endDateTime;
    }

    /**
     * Getter for CreationDateTime.
     * Date and time at which the resource was created. All dates in the JSON payloads are
     * represented in ISO 8601 date-time format. All date-time fields in responses must include the
     * timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @return Returns the LocalDateTime
     */
    @JsonGetter("CreationDateTime")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCreationDateTime() {
        return creationDateTime;
    }

    /**
     * Setter for CreationDateTime.
     * Date and time at which the resource was created. All dates in the JSON payloads are
     * represented in ISO 8601 date-time format. All date-time fields in responses must include the
     * timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @param creationDateTime Value for LocalDateTime
     */
    @JsonSetter("CreationDateTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCreationDateTime(LocalDateTime creationDateTime) {
        this.creationDateTime = creationDateTime;
    }

    /**
     * Getter for StatementDescription.
     * Other descriptions that may be available for the statement resource.
     * @return Returns the List of String
     */
    @JsonGetter("StatementDescription")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getStatementDescription() {
        return statementDescription;
    }

    /**
     * Setter for StatementDescription.
     * Other descriptions that may be available for the statement resource.
     * @param statementDescription Value for List of String
     */
    @JsonSetter("StatementDescription")
    public void setStatementDescription(List<String> statementDescription) {
        this.statementDescription = statementDescription;
    }

    /**
     * Getter for StatementBenefit.
     * Set of elements used to provide details of a benefit or reward amount for the statement
     * resource.
     * @return Returns the List of StatementBenefit
     */
    @JsonGetter("StatementBenefit")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<StatementBenefit> getStatementBenefit() {
        return statementBenefit;
    }

    /**
     * Setter for StatementBenefit.
     * Set of elements used to provide details of a benefit or reward amount for the statement
     * resource.
     * @param statementBenefit Value for List of StatementBenefit
     */
    @JsonSetter("StatementBenefit")
    public void setStatementBenefit(List<StatementBenefit> statementBenefit) {
        this.statementBenefit = statementBenefit;
    }

    /**
     * Getter for StatementFee.
     * Set of elements used to provide details of a fee for the statement resource.
     * @return Returns the List of StatementFee
     */
    @JsonGetter("StatementFee")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<StatementFee> getStatementFee() {
        return statementFee;
    }

    /**
     * Setter for StatementFee.
     * Set of elements used to provide details of a fee for the statement resource.
     * @param statementFee Value for List of StatementFee
     */
    @JsonSetter("StatementFee")
    public void setStatementFee(List<StatementFee> statementFee) {
        this.statementFee = statementFee;
    }

    /**
     * Getter for StatementInterest.
     * Set of elements used to provide details of a generic interest amount related to the statement
     * resource.
     * @return Returns the List of StatementInterest
     */
    @JsonGetter("StatementInterest")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<StatementInterest> getStatementInterest() {
        return statementInterest;
    }

    /**
     * Setter for StatementInterest.
     * Set of elements used to provide details of a generic interest amount related to the statement
     * resource.
     * @param statementInterest Value for List of StatementInterest
     */
    @JsonSetter("StatementInterest")
    public void setStatementInterest(List<StatementInterest> statementInterest) {
        this.statementInterest = statementInterest;
    }

    /**
     * Getter for StatementDateTime.
     * Set of elements used to provide details of a generic date time for the statement resource.
     * @return Returns the List of StatementDateTime
     */
    @JsonGetter("StatementDateTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<StatementDateTime> getStatementDateTime() {
        return statementDateTime;
    }

    /**
     * Setter for StatementDateTime.
     * Set of elements used to provide details of a generic date time for the statement resource.
     * @param statementDateTime Value for List of StatementDateTime
     */
    @JsonSetter("StatementDateTime")
    public void setStatementDateTime(List<StatementDateTime> statementDateTime) {
        this.statementDateTime = statementDateTime;
    }

    /**
     * Getter for StatementRate.
     * Set of elements used to provide details of a generic rate related to the statement resource.
     * @return Returns the List of StatementRate
     */
    @JsonGetter("StatementRate")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<StatementRate> getStatementRate() {
        return statementRate;
    }

    /**
     * Setter for StatementRate.
     * Set of elements used to provide details of a generic rate related to the statement resource.
     * @param statementRate Value for List of StatementRate
     */
    @JsonSetter("StatementRate")
    public void setStatementRate(List<StatementRate> statementRate) {
        this.statementRate = statementRate;
    }

    /**
     * Getter for StatementValue.
     * Set of elements used to provide details of a generic number value related to the statement
     * resource.
     * @return Returns the List of StatementValue
     */
    @JsonGetter("StatementValue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<StatementValue> getStatementValue() {
        return statementValue;
    }

    /**
     * Setter for StatementValue.
     * Set of elements used to provide details of a generic number value related to the statement
     * resource.
     * @param statementValue Value for List of StatementValue
     */
    @JsonSetter("StatementValue")
    public void setStatementValue(List<StatementValue> statementValue) {
        this.statementValue = statementValue;
    }

    /**
     * Getter for StatementAmount.
     * Set of elements used to provide details of a generic amount for the statement resource.
     * @return Returns the List of StatementAmount
     */
    @JsonGetter("StatementAmount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<StatementAmount> getStatementAmount() {
        return statementAmount;
    }

    /**
     * Setter for StatementAmount.
     * Set of elements used to provide details of a generic amount for the statement resource.
     * @param statementAmount Value for List of StatementAmount
     */
    @JsonSetter("StatementAmount")
    public void setStatementAmount(List<StatementAmount> statementAmount) {
        this.statementAmount = statementAmount;
    }

    /**
     * Converts this StatementModel into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "StatementModel [" + "accountId=" + accountId + ", type=" + type + ", startDateTime="
                + startDateTime + ", endDateTime=" + endDateTime + ", creationDateTime="
                + creationDateTime + ", statementId=" + statementId + ", statementReference="
                + statementReference + ", statementDescription=" + statementDescription
                + ", statementBenefit=" + statementBenefit + ", statementFee=" + statementFee
                + ", statementInterest=" + statementInterest + ", statementDateTime="
                + statementDateTime + ", statementRate=" + statementRate + ", statementValue="
                + statementValue + ", statementAmount=" + statementAmount + "]";
    }

    /**
     * Builds a new {@link StatementModel.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link StatementModel.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(accountId, type, startDateTime, endDateTime, creationDateTime)
                .statementId(getStatementId())
                .statementReference(getStatementReference())
                .statementDescription(getStatementDescription())
                .statementBenefit(getStatementBenefit())
                .statementFee(getStatementFee())
                .statementInterest(getStatementInterest())
                .statementDateTime(getStatementDateTime())
                .statementRate(getStatementRate())
                .statementValue(getStatementValue())
                .statementAmount(getStatementAmount());
        return builder;
    }

    /**
     * Class to build instances of {@link StatementModel}.
     */
    public static class Builder {
        private String accountId;
        private StatementTypeEnum type;
        private LocalDateTime startDateTime;
        private LocalDateTime endDateTime;
        private LocalDateTime creationDateTime;
        private String statementId;
        private String statementReference;
        private List<String> statementDescription;
        private List<StatementBenefit> statementBenefit;
        private List<StatementFee> statementFee;
        private List<StatementInterest> statementInterest;
        private List<StatementDateTime> statementDateTime;
        private List<StatementRate> statementRate;
        private List<StatementValue> statementValue;
        private List<StatementAmount> statementAmount;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  accountId  String value for accountId.
         * @param  type  StatementTypeEnum value for type.
         * @param  startDateTime  LocalDateTime value for startDateTime.
         * @param  endDateTime  LocalDateTime value for endDateTime.
         * @param  creationDateTime  LocalDateTime value for creationDateTime.
         */
        public Builder(String accountId, StatementTypeEnum type, LocalDateTime startDateTime,
                LocalDateTime endDateTime, LocalDateTime creationDateTime) {
            this.accountId = accountId;
            this.type = type;
            this.startDateTime = startDateTime;
            this.endDateTime = endDateTime;
            this.creationDateTime = creationDateTime;
        }

        /**
         * Setter for accountId.
         * @param  accountId  String value for accountId.
         * @return Builder
         */
        public Builder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  StatementTypeEnum value for type.
         * @return Builder
         */
        public Builder type(StatementTypeEnum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for startDateTime.
         * @param  startDateTime  LocalDateTime value for startDateTime.
         * @return Builder
         */
        public Builder startDateTime(LocalDateTime startDateTime) {
            this.startDateTime = startDateTime;
            return this;
        }

        /**
         * Setter for endDateTime.
         * @param  endDateTime  LocalDateTime value for endDateTime.
         * @return Builder
         */
        public Builder endDateTime(LocalDateTime endDateTime) {
            this.endDateTime = endDateTime;
            return this;
        }

        /**
         * Setter for creationDateTime.
         * @param  creationDateTime  LocalDateTime value for creationDateTime.
         * @return Builder
         */
        public Builder creationDateTime(LocalDateTime creationDateTime) {
            this.creationDateTime = creationDateTime;
            return this;
        }

        /**
         * Setter for statementId.
         * @param  statementId  String value for statementId.
         * @return Builder
         */
        public Builder statementId(String statementId) {
            this.statementId = statementId;
            return this;
        }

        /**
         * Setter for statementReference.
         * @param  statementReference  String value for statementReference.
         * @return Builder
         */
        public Builder statementReference(String statementReference) {
            this.statementReference = statementReference;
            return this;
        }

        /**
         * Setter for statementDescription.
         * @param  statementDescription  List of String value for statementDescription.
         * @return Builder
         */
        public Builder statementDescription(List<String> statementDescription) {
            this.statementDescription = statementDescription;
            return this;
        }

        /**
         * Setter for statementBenefit.
         * @param  statementBenefit  List of StatementBenefit value for statementBenefit.
         * @return Builder
         */
        public Builder statementBenefit(List<StatementBenefit> statementBenefit) {
            this.statementBenefit = statementBenefit;
            return this;
        }

        /**
         * Setter for statementFee.
         * @param  statementFee  List of StatementFee value for statementFee.
         * @return Builder
         */
        public Builder statementFee(List<StatementFee> statementFee) {
            this.statementFee = statementFee;
            return this;
        }

        /**
         * Setter for statementInterest.
         * @param  statementInterest  List of StatementInterest value for statementInterest.
         * @return Builder
         */
        public Builder statementInterest(List<StatementInterest> statementInterest) {
            this.statementInterest = statementInterest;
            return this;
        }

        /**
         * Setter for statementDateTime.
         * @param  statementDateTime  List of StatementDateTime value for statementDateTime.
         * @return Builder
         */
        public Builder statementDateTime(List<StatementDateTime> statementDateTime) {
            this.statementDateTime = statementDateTime;
            return this;
        }

        /**
         * Setter for statementRate.
         * @param  statementRate  List of StatementRate value for statementRate.
         * @return Builder
         */
        public Builder statementRate(List<StatementRate> statementRate) {
            this.statementRate = statementRate;
            return this;
        }

        /**
         * Setter for statementValue.
         * @param  statementValue  List of StatementValue value for statementValue.
         * @return Builder
         */
        public Builder statementValue(List<StatementValue> statementValue) {
            this.statementValue = statementValue;
            return this;
        }

        /**
         * Setter for statementAmount.
         * @param  statementAmount  List of StatementAmount value for statementAmount.
         * @return Builder
         */
        public Builder statementAmount(List<StatementAmount> statementAmount) {
            this.statementAmount = statementAmount;
            return this;
        }

        /**
         * Builds a new {@link StatementModel} object using the set fields.
         * @return {@link StatementModel}
         */
        public StatementModel build() {
            return new StatementModel(accountId, type, startDateTime, endDateTime, creationDateTime,
                    statementId, statementReference, statementDescription, statementBenefit,
                    statementFee, statementInterest, statementDateTime, statementRate,
                    statementValue, statementAmount);
        }
    }
}
