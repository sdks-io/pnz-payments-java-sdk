/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import nz.co.middleware.apicentre.apinomatls.DateTimeHelper;

/**
 * This is a model class for StatementDateTime type.
 */
public class StatementDateTime {
    private LocalDateTime dateTime;
    private StatementDateTimeTypeEnum type;

    /**
     * Default constructor.
     */
    public StatementDateTime() {
    }

    /**
     * Initialization constructor.
     * @param  dateTime  LocalDateTime value for dateTime.
     * @param  type  StatementDateTimeTypeEnum value for type.
     */
    public StatementDateTime(
            LocalDateTime dateTime,
            StatementDateTimeTypeEnum type) {
        this.dateTime = dateTime;
        this.type = type;
    }

    /**
     * Getter for DateTime.
     * Date and time associated with the date time type. All dates in the JSON payloads are
     * represented in ISO 8601 date-time format. All date-time fields in responses must include the
     * timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @return Returns the LocalDateTime
     */
    @JsonGetter("DateTime")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateTime() {
        return dateTime;
    }

    /**
     * Setter for DateTime.
     * Date and time associated with the date time type. All dates in the JSON payloads are
     * represented in ISO 8601 date-time format. All date-time fields in responses must include the
     * timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @param dateTime Value for LocalDateTime
     */
    @JsonSetter("DateTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateTime(LocalDateTime dateTime) {
        this.dateTime = dateTime;
    }

    /**
     * Getter for Type.
     * Date time type, in a coded form.
     * @return Returns the StatementDateTimeTypeEnum
     */
    @JsonGetter("Type")
    public StatementDateTimeTypeEnum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * Date time type, in a coded form.
     * @param type Value for StatementDateTimeTypeEnum
     */
    @JsonSetter("Type")
    public void setType(StatementDateTimeTypeEnum type) {
        this.type = type;
    }

    /**
     * Converts this StatementDateTime into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "StatementDateTime [" + "dateTime=" + dateTime + ", type=" + type + "]";
    }

    /**
     * Builds a new {@link StatementDateTime.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link StatementDateTime.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(dateTime, type);
        return builder;
    }

    /**
     * Class to build instances of {@link StatementDateTime}.
     */
    public static class Builder {
        private LocalDateTime dateTime;
        private StatementDateTimeTypeEnum type;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  dateTime  LocalDateTime value for dateTime.
         * @param  type  StatementDateTimeTypeEnum value for type.
         */
        public Builder(LocalDateTime dateTime, StatementDateTimeTypeEnum type) {
            this.dateTime = dateTime;
            this.type = type;
        }

        /**
         * Setter for dateTime.
         * @param  dateTime  LocalDateTime value for dateTime.
         * @return Builder
         */
        public Builder dateTime(LocalDateTime dateTime) {
            this.dateTime = dateTime;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  StatementDateTimeTypeEnum value for type.
         * @return Builder
         */
        public Builder type(StatementDateTimeTypeEnum type) {
            this.type = type;
            return this;
        }

        /**
         * Builds a new {@link StatementDateTime} object using the set fields.
         * @return {@link StatementDateTime}
         */
        public StatementDateTime build() {
            return new StatementDateTime(dateTime, type);
        }
    }
}
