/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls;

import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.authentication.Authentication;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Supplier;
import nz.co.middleware.apicentre.apinomatls.authentication.BearerAuthManager;
import nz.co.middleware.apicentre.apinomatls.authentication.BearerAuthModel;
import nz.co.middleware.apicentre.apinomatls.controllers.AccountsController;
import nz.co.middleware.apicentre.apinomatls.controllers.BalancesController;
import nz.co.middleware.apicentre.apinomatls.controllers.BeneficiariesController;
import nz.co.middleware.apicentre.apinomatls.controllers.DirectDebitsController;
import nz.co.middleware.apicentre.apinomatls.controllers.OffersController;
import nz.co.middleware.apicentre.apinomatls.controllers.PartyController;
import nz.co.middleware.apicentre.apinomatls.controllers.ScheduledPaymentsController;
import nz.co.middleware.apicentre.apinomatls.controllers.StandingOrdersController;
import nz.co.middleware.apicentre.apinomatls.controllers.StatementsController;
import nz.co.middleware.apicentre.apinomatls.controllers.TransactionsController;
import nz.co.middleware.apicentre.apinomatls.http.client.HttpCallback;
import nz.co.middleware.apicentre.apinomatls.http.client.HttpClientConfiguration;
import nz.co.middleware.apicentre.apinomatls.http.client.ReadonlyHttpClientConfiguration;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class AccountAndTransactionAPISpecificationClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private AccountsController accounts;
    private BalancesController balances;
    private BeneficiariesController beneficiaries;
    private DirectDebitsController directDebits;
    private OffersController offers;
    private PartyController party;
    private ScheduledPaymentsController scheduledPayments;
    private StandingOrdersController standingOrders;
    private StatementsController statements;
    private TransactionsController transactions;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "APIMATIC 3.0";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * BearerAuthManager.
     */
    private BearerAuthManager bearerAuthManager;

    /**
     * The instance of BearerAuthModel.
     */
    private BearerAuthModel bearerAuthModel;

    /**
     * Map of authentication Managers.
     */
    private Map<String, Authentication> authentications = new HashMap<String, Authentication>();

    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private AccountAndTransactionAPISpecificationClient(Environment environment,
            HttpClient httpClient, ReadonlyHttpClientConfiguration httpClientConfig,
            BearerAuthModel bearerAuthModel, HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;

        this.bearerAuthModel = bearerAuthModel;

        this.bearerAuthManager = new BearerAuthManager(bearerAuthModel);
        this.authentications.put("HTTPBearerAuthentication", bearerAuthManager);

        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .compatibilityFactory(compatibilityFactory)
                .authentication(this.authentications)
                .callback(httpCallback)
                .userAgent(userAgent)
                .build();
        accounts = new AccountsController(globalConfig);
        balances = new BalancesController(globalConfig);
        beneficiaries = new BeneficiariesController(globalConfig);
        directDebits = new DirectDebitsController(globalConfig);
        offers = new OffersController(globalConfig);
        party = new PartyController(globalConfig);
        scheduledPayments = new ScheduledPaymentsController(globalConfig);
        standingOrders = new StandingOrdersController(globalConfig);
        statements = new StatementsController(globalConfig);
        transactions = new TransactionsController(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of AccountsController.
     * @return accounts
     */
    public AccountsController getAccountsController() {
        return accounts;
    }

    /**
     * Get the instance of BalancesController.
     * @return balances
     */
    public BalancesController getBalancesController() {
        return balances;
    }

    /**
     * Get the instance of BeneficiariesController.
     * @return beneficiaries
     */
    public BeneficiariesController getBeneficiariesController() {
        return beneficiaries;
    }

    /**
     * Get the instance of DirectDebitsController.
     * @return directDebits
     */
    public DirectDebitsController getDirectDebitsController() {
        return directDebits;
    }

    /**
     * Get the instance of OffersController.
     * @return offers
     */
    public OffersController getOffersController() {
        return offers;
    }

    /**
     * Get the instance of PartyController.
     * @return party
     */
    public PartyController getPartyController() {
        return party;
    }

    /**
     * Get the instance of ScheduledPaymentsController.
     * @return scheduledPayments
     */
    public ScheduledPaymentsController getScheduledPaymentsController() {
        return scheduledPayments;
    }

    /**
     * Get the instance of StandingOrdersController.
     * @return standingOrders
     */
    public StandingOrdersController getStandingOrdersController() {
        return standingOrders;
    }

    /**
     * Get the instance of StatementsController.
     * @return statements
     */
    public StatementsController getStatementsController() {
        return statements;
    }

    /**
     * Get the instance of TransactionsController.
     * @return transactions
     */
    public TransactionsController getTransactionsController() {
        return transactions;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The credentials to use with BearerAuth.
     * @return bearerAuthCredentials
     */
    public BearerAuthCredentials getBearerAuthCredentials() {
        return bearerAuthManager;
    }

    /**
     * The auth credential model for BearerAuth.
     * @return the instance of BearerAuthModel
     */
    public BearerAuthModel getBearerAuthModel() {
        return bearerAuthModel;
    }

    /**
     * OAuth 2.0 Access Token.
     * @return accessToken
     */
    public String getAccessToken() {
        return getBearerAuthCredentials().getAccessToken();
    }
    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        Map<String, SimpleEntry<Object, Boolean>> parameters = new HashMap<>();
        StringBuilder baseUrl = new StringBuilder(environmentMapper(environment, server));
        ApiHelper.appendUrlWithTemplateParameters(baseUrl, parameters);
        return baseUrl.toString();
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api-nomatls.apicentre.middleware.co.nz/open-banking-nz/v2.3";
            }
        }
        if (environment.equals(Environment.ENVIRONMENT2)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://authserver.example";
            }
        }
        return "https://api-nomatls.apicentre.middleware.co.nz/open-banking-nz/v2.3";
    }

    /**
     * Converts this AccountAndTransactionAPISpecificationClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "AccountAndTransactionAPISpecificationClient [" + "environment=" + environment
                + ", httpClientConfig=" + httpClientConfig + ", authentications=" + authentications
                + "]";
    }

    /**
     * Builds a new {@link AccountAndTransactionAPISpecificationClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link AccountAndTransactionAPISpecificationClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.bearerAuthCredentials(getBearerAuthModel()
                .toBuilder().build());
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(() -> ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link AccountAndTransactionAPISpecificationClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private BearerAuthModel bearerAuthModel = new BearerAuthModel.Builder("").build();
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Credentials setter for BearerAuth.
         * @param accessToken String value for accessToken.
         * @deprecated This builder method is deprecated.
         * Use {@link #bearerAuthCredentials(BearerAuthModel) bearerAuthCredentials} instead.
         * @return The current instance of builder.
         */
        @Deprecated
        public Builder accessToken(String accessToken) {
            bearerAuthModel = bearerAuthModel.toBuilder()
                .accessToken(accessToken)
                .build();
            return this;
        }

        /**
         * Credentials setter for BearerAuthCredentials.
         * @param bearerAuthModel The instance of BearerAuthModel.
         * @return The current instance of builder.
         */
        public Builder bearerAuthCredentials(BearerAuthModel bearerAuthModel) {
            this.bearerAuthModel = bearerAuthModel;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Private Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param supplier Supplier for the builder of httpClientConfiguration.
         * @return Builder
         */
        private Builder httpClientConfig(Supplier<HttpClientConfiguration.Builder> supplier) {
            httpClientConfigBuilder = supplier.get();
            return this;
        }

        /**
         * Builds a new AccountAndTransactionAPISpecificationClient object using the set fields.
         * @return AccountAndTransactionAPISpecificationClient
         */
        public AccountAndTransactionAPISpecificationClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new AccountAndTransactionAPISpecificationClient(environment, httpClient,
                    httpClientConfig, bearerAuthModel, httpCallback);
        }
    }
}