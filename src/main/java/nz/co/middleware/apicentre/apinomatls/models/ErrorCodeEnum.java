/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * ErrorCodeEnum to be used.
 */
public enum ErrorCodeEnum {
    ENUM_FIELDEXPECTED,

    ENUM_FIELDINVALID,

    ENUM_FIELDMISSING,

    ENUM_FIELDUNEXPECTED,

    ENUM_HEADERINVALID,

    ENUM_HEADERMISSING,

    ENUM_QUERYPARAMINVALID,

    REAUTHENTICATE,

    REAUTHORISE,

    ENUM_RESOURCECONSENTCREDITORACCOUNT,

    ENUM_RESOURCECONSENTDEBTORACCOUNT,

    ENUM_RESOURCECONSENTEXCEEDDATAPERMISSIONS,

    ENUM_RESOURCECONSENTEXCEEDDATES,

    ENUM_RESOURCECONSENTEXCEEDFREQUENCY,

    ENUM_RESOURCECONSENTEXCEEDMAXIMUMAMOUNT,

    ENUM_RESOURCECONSENTEXCEEDTOTALAMOUNT,

    ENUM_RESOURCECONSENTEXCEEDTOTALCOUNT,

    ENUM_RESOURCECONSENTEXCEEDTRANSACTIONDATES,

    ENUM_RESOURCECONSENTINVALIDSTATUS,

    ENUM_RESOURCECONSENTMISMATCH,

    ENUM_RESOURCEINVALID,

    UNEXPECTEDERROR,

    ENUM_UNSUPPORTEDACCOUNTIDENTIFIER,

    ENUM_UNSUPPORTEDACCOUNTSECONDARYIDENTIFIER,

    ENUM_UNSUPPORTEDCURRENCY,

    ENUM_UNSUPPORTEDSCHEME;


    private static TreeMap<String, ErrorCodeEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        ENUM_FIELDEXPECTED.value = "Field.Expected";
        ENUM_FIELDINVALID.value = "Field.Invalid";
        ENUM_FIELDMISSING.value = "Field.Missing";
        ENUM_FIELDUNEXPECTED.value = "Field.Unexpected";
        ENUM_HEADERINVALID.value = "Header.Invalid";
        ENUM_HEADERMISSING.value = "Header.Missing";
        ENUM_QUERYPARAMINVALID.value = "QueryParam.Invalid";
        REAUTHENTICATE.value = "Reauthenticate";
        REAUTHORISE.value = "Reauthorise";
        ENUM_RESOURCECONSENTCREDITORACCOUNT.value = "Resource.Consent.CreditorAccount";
        ENUM_RESOURCECONSENTDEBTORACCOUNT.value = "Resource.Consent.DebtorAccount";
        ENUM_RESOURCECONSENTEXCEEDDATAPERMISSIONS.value = "Resource.Consent.Exceed.DataPermissions";
        ENUM_RESOURCECONSENTEXCEEDDATES.value = "Resource.Consent.Exceed.Dates";
        ENUM_RESOURCECONSENTEXCEEDFREQUENCY.value = "Resource.Consent.Exceed.Frequency";
        ENUM_RESOURCECONSENTEXCEEDMAXIMUMAMOUNT.value = "Resource.Consent.Exceed.MaximumAmount";
        ENUM_RESOURCECONSENTEXCEEDTOTALAMOUNT.value = "Resource.Consent.Exceed.TotalAmount";
        ENUM_RESOURCECONSENTEXCEEDTOTALCOUNT.value = "Resource.Consent.Exceed.TotalCount";
        ENUM_RESOURCECONSENTEXCEEDTRANSACTIONDATES.value = "Resource.Consent.Exceed.TransactionDates";
        ENUM_RESOURCECONSENTINVALIDSTATUS.value = "Resource.Consent.InvalidStatus";
        ENUM_RESOURCECONSENTMISMATCH.value = "Resource.Consent.Mismatch";
        ENUM_RESOURCEINVALID.value = "Resource.Invalid";
        UNEXPECTEDERROR.value = "UnexpectedError";
        ENUM_UNSUPPORTEDACCOUNTIDENTIFIER.value = "Unsupported.AccountIdentifier";
        ENUM_UNSUPPORTEDACCOUNTSECONDARYIDENTIFIER.value = "Unsupported.AccountSecondaryIdentifier";
        ENUM_UNSUPPORTEDCURRENCY.value = "Unsupported.Currency";
        ENUM_UNSUPPORTEDSCHEME.value = "Unsupported.Scheme";

        valueMap.put("Field.Expected", ENUM_FIELDEXPECTED);
        valueMap.put("Field.Invalid", ENUM_FIELDINVALID);
        valueMap.put("Field.Missing", ENUM_FIELDMISSING);
        valueMap.put("Field.Unexpected", ENUM_FIELDUNEXPECTED);
        valueMap.put("Header.Invalid", ENUM_HEADERINVALID);
        valueMap.put("Header.Missing", ENUM_HEADERMISSING);
        valueMap.put("QueryParam.Invalid", ENUM_QUERYPARAMINVALID);
        valueMap.put("Reauthenticate", REAUTHENTICATE);
        valueMap.put("Reauthorise", REAUTHORISE);
        valueMap.put("Resource.Consent.CreditorAccount", ENUM_RESOURCECONSENTCREDITORACCOUNT);
        valueMap.put("Resource.Consent.DebtorAccount", ENUM_RESOURCECONSENTDEBTORACCOUNT);
        valueMap.put("Resource.Consent.Exceed.DataPermissions", ENUM_RESOURCECONSENTEXCEEDDATAPERMISSIONS);
        valueMap.put("Resource.Consent.Exceed.Dates", ENUM_RESOURCECONSENTEXCEEDDATES);
        valueMap.put("Resource.Consent.Exceed.Frequency", ENUM_RESOURCECONSENTEXCEEDFREQUENCY);
        valueMap.put("Resource.Consent.Exceed.MaximumAmount", ENUM_RESOURCECONSENTEXCEEDMAXIMUMAMOUNT);
        valueMap.put("Resource.Consent.Exceed.TotalAmount", ENUM_RESOURCECONSENTEXCEEDTOTALAMOUNT);
        valueMap.put("Resource.Consent.Exceed.TotalCount", ENUM_RESOURCECONSENTEXCEEDTOTALCOUNT);
        valueMap.put("Resource.Consent.Exceed.TransactionDates", ENUM_RESOURCECONSENTEXCEEDTRANSACTIONDATES);
        valueMap.put("Resource.Consent.InvalidStatus", ENUM_RESOURCECONSENTINVALIDSTATUS);
        valueMap.put("Resource.Consent.Mismatch", ENUM_RESOURCECONSENTMISMATCH);
        valueMap.put("Resource.Invalid", ENUM_RESOURCEINVALID);
        valueMap.put("UnexpectedError", UNEXPECTEDERROR);
        valueMap.put("Unsupported.AccountIdentifier", ENUM_UNSUPPORTEDACCOUNTIDENTIFIER);
        valueMap.put("Unsupported.AccountSecondaryIdentifier", ENUM_UNSUPPORTEDACCOUNTSECONDARYIDENTIFIER);
        valueMap.put("Unsupported.Currency", ENUM_UNSUPPORTEDCURRENCY);
        valueMap.put("Unsupported.Scheme", ENUM_UNSUPPORTEDSCHEME);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static ErrorCodeEnum constructFromString(String toConvert) throws IOException {
        ErrorCodeEnum enumValue = fromString(toConvert);
        if (enumValue == null) {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static ErrorCodeEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of ErrorCodeEnum values to list of string values.
     * @param toConvert The list of ErrorCodeEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<ErrorCodeEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (ErrorCodeEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 