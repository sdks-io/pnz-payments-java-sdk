/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for PartyModel type.
 */
public class PartyModel {
    private String partyId;
    private String partyNumber;
    private PartyTypeEnum partyType;
    private String name;
    private String emailAddress;
    private String phone;
    private String mobile;
    private List<Address> address;

    /**
     * Default constructor.
     */
    public PartyModel() {
    }

    /**
     * Initialization constructor.
     * @param  partyId  String value for partyId.
     * @param  partyNumber  String value for partyNumber.
     * @param  partyType  PartyTypeEnum value for partyType.
     * @param  name  String value for name.
     * @param  emailAddress  String value for emailAddress.
     * @param  phone  String value for phone.
     * @param  mobile  String value for mobile.
     * @param  address  List of Address value for address.
     */
    public PartyModel(
            String partyId,
            String partyNumber,
            PartyTypeEnum partyType,
            String name,
            String emailAddress,
            String phone,
            String mobile,
            List<Address> address) {
        this.partyId = partyId;
        this.partyNumber = partyNumber;
        this.partyType = partyType;
        this.name = name;
        this.emailAddress = emailAddress;
        this.phone = phone;
        this.mobile = mobile;
        this.address = address;
    }

    /**
     * Getter for PartyId.
     * A unique and immutable identifier used to identify the customer resource. This identifier has
     * no meaning to the account owner.
     * @return Returns the String
     */
    @JsonGetter("PartyId")
    public String getPartyId() {
        return partyId;
    }

    /**
     * Setter for PartyId.
     * A unique and immutable identifier used to identify the customer resource. This identifier has
     * no meaning to the account owner.
     * @param partyId Value for String
     */
    @JsonSetter("PartyId")
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }

    /**
     * Getter for PartyNumber.
     * Number assigned by an agent to identify its customer.
     * @return Returns the String
     */
    @JsonGetter("PartyNumber")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPartyNumber() {
        return partyNumber;
    }

    /**
     * Setter for PartyNumber.
     * Number assigned by an agent to identify its customer.
     * @param partyNumber Value for String
     */
    @JsonSetter("PartyNumber")
    public void setPartyNumber(String partyNumber) {
        this.partyNumber = partyNumber;
    }

    /**
     * Getter for PartyType.
     * Party type, in a coded form.
     * @return Returns the PartyTypeEnum
     */
    @JsonGetter("PartyType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PartyTypeEnum getPartyType() {
        return partyType;
    }

    /**
     * Setter for PartyType.
     * Party type, in a coded form.
     * @param partyType Value for PartyTypeEnum
     */
    @JsonSetter("PartyType")
    public void setPartyType(PartyTypeEnum partyType) {
        this.partyType = partyType;
    }

    /**
     * Getter for Name.
     * Name by which a party is known and which is usually used to identify that party.
     * @return Returns the String
     */
    @JsonGetter("Name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Name by which a party is known and which is usually used to identify that party.
     * @param name Value for String
     */
    @JsonSetter("Name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for EmailAddress.
     * Address for electronic mail (e-mail).
     * @return Returns the String
     */
    @JsonGetter("EmailAddress")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getEmailAddress() {
        return emailAddress;
    }

    /**
     * Setter for EmailAddress.
     * Address for electronic mail (e-mail).
     * @param emailAddress Value for String
     */
    @JsonSetter("EmailAddress")
    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    /**
     * Getter for Phone.
     * Collection of information that identifies a phone number, as defined by telecom services.
     * @return Returns the String
     */
    @JsonGetter("Phone")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPhone() {
        return phone;
    }

    /**
     * Setter for Phone.
     * Collection of information that identifies a phone number, as defined by telecom services.
     * @param phone Value for String
     */
    @JsonSetter("Phone")
    public void setPhone(String phone) {
        this.phone = phone;
    }

    /**
     * Getter for Mobile.
     * Collection of information that identifies a mobile phone number, as defined by telecom
     * services.
     * @return Returns the String
     */
    @JsonGetter("Mobile")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMobile() {
        return mobile;
    }

    /**
     * Setter for Mobile.
     * Collection of information that identifies a mobile phone number, as defined by telecom
     * services.
     * @param mobile Value for String
     */
    @JsonSetter("Mobile")
    public void setMobile(String mobile) {
        this.mobile = mobile;
    }

    /**
     * Getter for Address.
     * Postal address of a party.
     * @return Returns the List of Address
     */
    @JsonGetter("Address")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Address> getAddress() {
        return address;
    }

    /**
     * Setter for Address.
     * Postal address of a party.
     * @param address Value for List of Address
     */
    @JsonSetter("Address")
    public void setAddress(List<Address> address) {
        this.address = address;
    }

    /**
     * Converts this PartyModel into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PartyModel [" + "partyId=" + partyId + ", partyNumber=" + partyNumber
                + ", partyType=" + partyType + ", name=" + name + ", emailAddress=" + emailAddress
                + ", phone=" + phone + ", mobile=" + mobile + ", address=" + address + "]";
    }

    /**
     * Builds a new {@link PartyModel.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PartyModel.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(partyId)
                .partyNumber(getPartyNumber())
                .partyType(getPartyType())
                .name(getName())
                .emailAddress(getEmailAddress())
                .phone(getPhone())
                .mobile(getMobile())
                .address(getAddress());
        return builder;
    }

    /**
     * Class to build instances of {@link PartyModel}.
     */
    public static class Builder {
        private String partyId;
        private String partyNumber;
        private PartyTypeEnum partyType;
        private String name;
        private String emailAddress;
        private String phone;
        private String mobile;
        private List<Address> address;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  partyId  String value for partyId.
         */
        public Builder(String partyId) {
            this.partyId = partyId;
        }

        /**
         * Setter for partyId.
         * @param  partyId  String value for partyId.
         * @return Builder
         */
        public Builder partyId(String partyId) {
            this.partyId = partyId;
            return this;
        }

        /**
         * Setter for partyNumber.
         * @param  partyNumber  String value for partyNumber.
         * @return Builder
         */
        public Builder partyNumber(String partyNumber) {
            this.partyNumber = partyNumber;
            return this;
        }

        /**
         * Setter for partyType.
         * @param  partyType  PartyTypeEnum value for partyType.
         * @return Builder
         */
        public Builder partyType(PartyTypeEnum partyType) {
            this.partyType = partyType;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for emailAddress.
         * @param  emailAddress  String value for emailAddress.
         * @return Builder
         */
        public Builder emailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Setter for phone.
         * @param  phone  String value for phone.
         * @return Builder
         */
        public Builder phone(String phone) {
            this.phone = phone;
            return this;
        }

        /**
         * Setter for mobile.
         * @param  mobile  String value for mobile.
         * @return Builder
         */
        public Builder mobile(String mobile) {
            this.mobile = mobile;
            return this;
        }

        /**
         * Setter for address.
         * @param  address  List of Address value for address.
         * @return Builder
         */
        public Builder address(List<Address> address) {
            this.address = address;
            return this;
        }

        /**
         * Builds a new {@link PartyModel} object using the set fields.
         * @return {@link PartyModel}
         */
        public PartyModel build() {
            return new PartyModel(partyId, partyNumber, partyType, name, emailAddress, phone,
                    mobile, address);
        }
    }
}
