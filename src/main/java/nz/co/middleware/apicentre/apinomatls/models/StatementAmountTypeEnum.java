/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * StatementAmountTypeEnum to be used.
 */
public enum StatementAmountTypeEnum {
    ARREARSCLOSINGBALANCE,

    AVAILABLEBALANCE,

    AVERAGEBALANCEWHENINCREDIT,

    AVERAGEBALANCEWHENINDEBIT,

    AVERAGEDAILYBALANCE,

    BALANCETRANSFERCLOSINGBALANCE,

    CASHCLOSINGBALANCE,

    CLOSINGBALANCE,

    CREDITLIMIT,

    CURRENTPAYMENT,

    DIRECTDEBITPAYMENTDUE,

    MINIMUMPAYMENTDUE,

    PREVIOUSCLOSINGBALANCE,

    PREVIOUSPAYMENT,

    PURCHASECLOSINGBALANCE,

    STARTINGBALANCE,

    TOTALADJUSTMENTS,

    TOTALCASHADVANCES,

    TOTALCHARGES,

    TOTALCREDITS,

    TOTALDEBITS,

    TOTALPURCHASES;


    private static TreeMap<String, StatementAmountTypeEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        ARREARSCLOSINGBALANCE.value = "ArrearsClosingBalance";
        AVAILABLEBALANCE.value = "AvailableBalance";
        AVERAGEBALANCEWHENINCREDIT.value = "AverageBalanceWhenInCredit";
        AVERAGEBALANCEWHENINDEBIT.value = "AverageBalanceWhenInDebit";
        AVERAGEDAILYBALANCE.value = "AverageDailyBalance";
        BALANCETRANSFERCLOSINGBALANCE.value = "BalanceTransferClosingBalance";
        CASHCLOSINGBALANCE.value = "CashClosingBalance";
        CLOSINGBALANCE.value = "ClosingBalance";
        CREDITLIMIT.value = "CreditLimit";
        CURRENTPAYMENT.value = "CurrentPayment";
        DIRECTDEBITPAYMENTDUE.value = "DirectDebitPaymentDue";
        MINIMUMPAYMENTDUE.value = "MinimumPaymentDue";
        PREVIOUSCLOSINGBALANCE.value = "PreviousClosingBalance";
        PREVIOUSPAYMENT.value = "PreviousPayment";
        PURCHASECLOSINGBALANCE.value = "PurchaseClosingBalance";
        STARTINGBALANCE.value = "StartingBalance";
        TOTALADJUSTMENTS.value = "TotalAdjustments";
        TOTALCASHADVANCES.value = "TotalCashAdvances";
        TOTALCHARGES.value = "TotalCharges";
        TOTALCREDITS.value = "TotalCredits";
        TOTALDEBITS.value = "TotalDebits";
        TOTALPURCHASES.value = "TotalPurchases";

        valueMap.put("ArrearsClosingBalance", ARREARSCLOSINGBALANCE);
        valueMap.put("AvailableBalance", AVAILABLEBALANCE);
        valueMap.put("AverageBalanceWhenInCredit", AVERAGEBALANCEWHENINCREDIT);
        valueMap.put("AverageBalanceWhenInDebit", AVERAGEBALANCEWHENINDEBIT);
        valueMap.put("AverageDailyBalance", AVERAGEDAILYBALANCE);
        valueMap.put("BalanceTransferClosingBalance", BALANCETRANSFERCLOSINGBALANCE);
        valueMap.put("CashClosingBalance", CASHCLOSINGBALANCE);
        valueMap.put("ClosingBalance", CLOSINGBALANCE);
        valueMap.put("CreditLimit", CREDITLIMIT);
        valueMap.put("CurrentPayment", CURRENTPAYMENT);
        valueMap.put("DirectDebitPaymentDue", DIRECTDEBITPAYMENTDUE);
        valueMap.put("MinimumPaymentDue", MINIMUMPAYMENTDUE);
        valueMap.put("PreviousClosingBalance", PREVIOUSCLOSINGBALANCE);
        valueMap.put("PreviousPayment", PREVIOUSPAYMENT);
        valueMap.put("PurchaseClosingBalance", PURCHASECLOSINGBALANCE);
        valueMap.put("StartingBalance", STARTINGBALANCE);
        valueMap.put("TotalAdjustments", TOTALADJUSTMENTS);
        valueMap.put("TotalCashAdvances", TOTALCASHADVANCES);
        valueMap.put("TotalCharges", TOTALCHARGES);
        valueMap.put("TotalCredits", TOTALCREDITS);
        valueMap.put("TotalDebits", TOTALDEBITS);
        valueMap.put("TotalPurchases", TOTALPURCHASES);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static StatementAmountTypeEnum constructFromString(String toConvert) throws IOException {
        StatementAmountTypeEnum enumValue = fromString(toConvert);
        if (enumValue == null) {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static StatementAmountTypeEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of StatementAmountTypeEnum values to list of string values.
     * @param toConvert The list of StatementAmountTypeEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<StatementAmountTypeEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (StatementAmountTypeEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 