/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for StatementValue type.
 */
public class StatementValue {
    private int value;
    private StatementValueTypeEnum type;

    /**
     * Default constructor.
     */
    public StatementValue() {
    }

    /**
     * Initialization constructor.
     * @param  value  int value for value.
     * @param  type  StatementValueTypeEnum value for type.
     */
    public StatementValue(
            int value,
            StatementValueTypeEnum type) {
        this.value = value;
        this.type = type;
    }

    /**
     * Getter for Value.
     * Value associated with the statement value type.
     * @return Returns the int
     */
    @JsonGetter("Value")
    public int getValue() {
        return value;
    }

    /**
     * Setter for Value.
     * Value associated with the statement value type.
     * @param value Value for int
     */
    @JsonSetter("Value")
    public void setValue(int value) {
        this.value = value;
    }

    /**
     * Getter for Type.
     * Statement value type, in a coded form.
     * @return Returns the StatementValueTypeEnum
     */
    @JsonGetter("Type")
    public StatementValueTypeEnum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * Statement value type, in a coded form.
     * @param type Value for StatementValueTypeEnum
     */
    @JsonSetter("Type")
    public void setType(StatementValueTypeEnum type) {
        this.type = type;
    }

    /**
     * Converts this StatementValue into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "StatementValue [" + "value=" + value + ", type=" + type + "]";
    }

    /**
     * Builds a new {@link StatementValue.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link StatementValue.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(value, type);
        return builder;
    }

    /**
     * Class to build instances of {@link StatementValue}.
     */
    public static class Builder {
        private int value;
        private StatementValueTypeEnum type;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  value  int value for value.
         * @param  type  StatementValueTypeEnum value for type.
         */
        public Builder(int value, StatementValueTypeEnum type) {
            this.value = value;
            this.type = type;
        }

        /**
         * Setter for value.
         * @param  value  int value for value.
         * @return Builder
         */
        public Builder value(int value) {
            this.value = value;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  StatementValueTypeEnum value for type.
         * @return Builder
         */
        public Builder type(StatementValueTypeEnum type) {
            this.type = type;
            return this;
        }

        /**
         * Builds a new {@link StatementValue} object using the set fields.
         * @return {@link StatementValue}
         */
        public StatementValue build() {
            return new StatementValue(value, type);
        }
    }
}
