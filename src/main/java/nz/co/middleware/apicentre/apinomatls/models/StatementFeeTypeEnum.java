/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * StatementFeeTypeEnum to be used.
 */
public enum StatementFeeTypeEnum {
    ANNUAL,

    BALANCETRANSFER,

    CASHADVANCE,

    CASHTRANSACTION,

    FOREIGNTRANSACTION,

    GAMBLING,

    LATEPAYMENT,

    MONEYTRANSFER,

    MONTHLY,

    OVERLIMIT,

    POSTALORDER,

    PRIZEENTRY,

    STATEMENTCOPY,

    TOTAL;


    private static TreeMap<String, StatementFeeTypeEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        ANNUAL.value = "Annual";
        BALANCETRANSFER.value = "BalanceTransfer";
        CASHADVANCE.value = "CashAdvance";
        CASHTRANSACTION.value = "CashTransaction";
        FOREIGNTRANSACTION.value = "ForeignTransaction";
        GAMBLING.value = "Gambling";
        LATEPAYMENT.value = "LatePayment";
        MONEYTRANSFER.value = "MoneyTransfer";
        MONTHLY.value = "Monthly";
        OVERLIMIT.value = "Overlimit";
        POSTALORDER.value = "PostalOrder";
        PRIZEENTRY.value = "PrizeEntry";
        STATEMENTCOPY.value = "StatementCopy";
        TOTAL.value = "Total";

        valueMap.put("Annual", ANNUAL);
        valueMap.put("BalanceTransfer", BALANCETRANSFER);
        valueMap.put("CashAdvance", CASHADVANCE);
        valueMap.put("CashTransaction", CASHTRANSACTION);
        valueMap.put("ForeignTransaction", FOREIGNTRANSACTION);
        valueMap.put("Gambling", GAMBLING);
        valueMap.put("LatePayment", LATEPAYMENT);
        valueMap.put("MoneyTransfer", MONEYTRANSFER);
        valueMap.put("Monthly", MONTHLY);
        valueMap.put("Overlimit", OVERLIMIT);
        valueMap.put("PostalOrder", POSTALORDER);
        valueMap.put("PrizeEntry", PRIZEENTRY);
        valueMap.put("StatementCopy", STATEMENTCOPY);
        valueMap.put("Total", TOTAL);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static StatementFeeTypeEnum constructFromString(String toConvert) throws IOException {
        StatementFeeTypeEnum enumValue = fromString(toConvert);
        if (enumValue == null) {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static StatementFeeTypeEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of StatementFeeTypeEnum values to list of string values.
     * @param toConvert The list of StatementFeeTypeEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<StatementFeeTypeEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (StatementFeeTypeEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 