/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Servicer type.
 */
public class Servicer {
    private String schemeName;
    private String identification;

    /**
     * Default constructor.
     */
    public Servicer() {
        schemeName = "BICFI";
    }

    /**
     * Initialization constructor.
     * @param  schemeName  String value for schemeName.
     * @param  identification  String value for identification.
     */
    public Servicer(
            String schemeName,
            String identification) {
        this.schemeName = schemeName;
        this.identification = identification;
    }

    /**
     * Getter for SchemeName.
     * Name of the identification scheme, in a coded form as published in an external list.
     * @return Returns the String
     */
    @JsonGetter("SchemeName")
    public String getSchemeName() {
        return schemeName;
    }

    /**
     * Setter for SchemeName.
     * Name of the identification scheme, in a coded form as published in an external list.
     * @param schemeName Value for String
     */
    @JsonSetter("SchemeName")
    private void setSchemeName(String schemeName) {
        this.schemeName = schemeName;
    }

    /**
     * Getter for Identification.
     * Unique and unambiguous identification of the servicing institution.
     * @return Returns the String
     */
    @JsonGetter("Identification")
    public String getIdentification() {
        return identification;
    }

    /**
     * Setter for Identification.
     * Unique and unambiguous identification of the servicing institution.
     * @param identification Value for String
     */
    @JsonSetter("Identification")
    public void setIdentification(String identification) {
        this.identification = identification;
    }

    /**
     * Converts this Servicer into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Servicer [" + "schemeName=" + schemeName + ", identification=" + identification
                + "]";
    }

    /**
     * Builds a new {@link Servicer.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Servicer.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(schemeName, identification);
        return builder;
    }

    /**
     * Class to build instances of {@link Servicer}.
     */
    public static class Builder {
        private String schemeName = "BICFI";
        private String identification;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  schemeName  String value for schemeName.
         * @param  identification  String value for identification.
         */
        public Builder(String schemeName, String identification) {
            this.schemeName = schemeName;
            this.identification = identification;
        }

        /**
         * Setter for schemeName.
         * @param  schemeName  String value for schemeName.
         * @return Builder
         */
        public Builder schemeName(String schemeName) {
            this.schemeName = schemeName;
            return this;
        }

        /**
         * Setter for identification.
         * @param  identification  String value for identification.
         * @return Builder
         */
        public Builder identification(String identification) {
            this.identification = identification;
            return this;
        }

        /**
         * Builds a new {@link Servicer} object using the set fields.
         * @return {@link Servicer}
         */
        public Servicer build() {
            return new Servicer(schemeName, identification);
        }
    }
}
