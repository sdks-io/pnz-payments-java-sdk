/*
 * AccountAndTransactionAPISpecificationLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package nz.co.middleware.apicentre.apinomatls.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import java.util.List;
import nz.co.middleware.apicentre.apinomatls.DateTimeHelper;

/**
 * This is a model class for Consent type.
 */
public class Consent {
    private List<PermissionEnum> permissions;
    private LocalDateTime expirationDateTime;
    private LocalDateTime transactionFromDateTime;
    private LocalDateTime transactionToDateTime;

    /**
     * Default constructor.
     */
    public Consent() {
    }

    /**
     * Initialization constructor.
     * @param  permissions  List of PermissionEnum value for permissions.
     * @param  expirationDateTime  LocalDateTime value for expirationDateTime.
     * @param  transactionFromDateTime  LocalDateTime value for transactionFromDateTime.
     * @param  transactionToDateTime  LocalDateTime value for transactionToDateTime.
     */
    public Consent(
            List<PermissionEnum> permissions,
            LocalDateTime expirationDateTime,
            LocalDateTime transactionFromDateTime,
            LocalDateTime transactionToDateTime) {
        this.permissions = permissions;
        this.expirationDateTime = expirationDateTime;
        this.transactionFromDateTime = transactionFromDateTime;
        this.transactionToDateTime = transactionToDateTime;
    }

    /**
     * Getter for Permissions.
     * Specifies the Open Banking account access consent types. This is a list of the data clusters
     * being consented by the Customer, and requested for authorisation with the API Provider.
     * @return Returns the List of PermissionEnum
     */
    @JsonGetter("Permissions")
    public List<PermissionEnum> getPermissions() {
        return permissions;
    }

    /**
     * Setter for Permissions.
     * Specifies the Open Banking account access consent types. This is a list of the data clusters
     * being consented by the Customer, and requested for authorisation with the API Provider.
     * @param permissions Value for List of PermissionEnum
     */
    @JsonSetter("Permissions")
    public void setPermissions(List<PermissionEnum> permissions) {
        this.permissions = permissions;
    }

    /**
     * Getter for ExpirationDateTime.
     * Specified date and time the permissions will expire. If this is not populated, the
     * permissions will be open ended. All dates in the JSON payloads are represented in ISO 8601
     * date-time format. All date-time fields in responses must include the timezone. An example is
     * below: 2017-04-05T10:43:07+00:00
     * @return Returns the LocalDateTime
     */
    @JsonGetter("ExpirationDateTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getExpirationDateTime() {
        return expirationDateTime;
    }

    /**
     * Setter for ExpirationDateTime.
     * Specified date and time the permissions will expire. If this is not populated, the
     * permissions will be open ended. All dates in the JSON payloads are represented in ISO 8601
     * date-time format. All date-time fields in responses must include the timezone. An example is
     * below: 2017-04-05T10:43:07+00:00
     * @param expirationDateTime Value for LocalDateTime
     */
    @JsonSetter("ExpirationDateTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setExpirationDateTime(LocalDateTime expirationDateTime) {
        this.expirationDateTime = expirationDateTime;
    }

    /**
     * Getter for TransactionFromDateTime.
     * Specified start date and time for the transaction query period. If this is not populated, the
     * start date will be open ended, and data will be returned from the earliest available
     * transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format. All
     * date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     * @return Returns the LocalDateTime
     */
    @JsonGetter("TransactionFromDateTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getTransactionFromDateTime() {
        return transactionFromDateTime;
    }

    /**
     * Setter for TransactionFromDateTime.
     * Specified start date and time for the transaction query period. If this is not populated, the
     * start date will be open ended, and data will be returned from the earliest available
     * transaction. All dates in the JSON payloads are represented in ISO 8601 date-time format. All
     * date-time fields in responses must include the timezone. An example is below:
     * 2017-04-05T10:43:07+00:00
     * @param transactionFromDateTime Value for LocalDateTime
     */
    @JsonSetter("TransactionFromDateTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setTransactionFromDateTime(LocalDateTime transactionFromDateTime) {
        this.transactionFromDateTime = transactionFromDateTime;
    }

    /**
     * Getter for TransactionToDateTime.
     * Specified end date and time for the transaction query period. If this is not populated, the
     * end date will be open ended, and data will be returned to the latest available transaction.
     * All dates in the JSON payloads are represented in ISO 8601 date-time format. All date-time
     * fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @return Returns the LocalDateTime
     */
    @JsonGetter("TransactionToDateTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getTransactionToDateTime() {
        return transactionToDateTime;
    }

    /**
     * Setter for TransactionToDateTime.
     * Specified end date and time for the transaction query period. If this is not populated, the
     * end date will be open ended, and data will be returned to the latest available transaction.
     * All dates in the JSON payloads are represented in ISO 8601 date-time format. All date-time
     * fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
     * @param transactionToDateTime Value for LocalDateTime
     */
    @JsonSetter("TransactionToDateTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setTransactionToDateTime(LocalDateTime transactionToDateTime) {
        this.transactionToDateTime = transactionToDateTime;
    }

    /**
     * Converts this Consent into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Consent [" + "permissions=" + permissions + ", expirationDateTime="
                + expirationDateTime + ", transactionFromDateTime=" + transactionFromDateTime
                + ", transactionToDateTime=" + transactionToDateTime + "]";
    }

    /**
     * Builds a new {@link Consent.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Consent.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(permissions)
                .expirationDateTime(getExpirationDateTime())
                .transactionFromDateTime(getTransactionFromDateTime())
                .transactionToDateTime(getTransactionToDateTime());
        return builder;
    }

    /**
     * Class to build instances of {@link Consent}.
     */
    public static class Builder {
        private List<PermissionEnum> permissions;
        private LocalDateTime expirationDateTime;
        private LocalDateTime transactionFromDateTime;
        private LocalDateTime transactionToDateTime;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  permissions  List of PermissionEnum value for permissions.
         */
        public Builder(List<PermissionEnum> permissions) {
            this.permissions = permissions;
        }

        /**
         * Setter for permissions.
         * @param  permissions  List of PermissionEnum value for permissions.
         * @return Builder
         */
        public Builder permissions(List<PermissionEnum> permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Setter for expirationDateTime.
         * @param  expirationDateTime  LocalDateTime value for expirationDateTime.
         * @return Builder
         */
        public Builder expirationDateTime(LocalDateTime expirationDateTime) {
            this.expirationDateTime = expirationDateTime;
            return this;
        }

        /**
         * Setter for transactionFromDateTime.
         * @param  transactionFromDateTime  LocalDateTime value for transactionFromDateTime.
         * @return Builder
         */
        public Builder transactionFromDateTime(LocalDateTime transactionFromDateTime) {
            this.transactionFromDateTime = transactionFromDateTime;
            return this;
        }

        /**
         * Setter for transactionToDateTime.
         * @param  transactionToDateTime  LocalDateTime value for transactionToDateTime.
         * @return Builder
         */
        public Builder transactionToDateTime(LocalDateTime transactionToDateTime) {
            this.transactionToDateTime = transactionToDateTime;
            return this;
        }

        /**
         * Builds a new {@link Consent} object using the set fields.
         * @return {@link Consent}
         */
        public Consent build() {
            return new Consent(permissions, expirationDateTime, transactionFromDateTime,
                    transactionToDateTime);
        }
    }
}
